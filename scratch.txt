#some code scratch
data = set(data)
#print(data)
#for tup in data:
#    print(tup)
while True:
    n = len(data)
    x = itertools.product(data, repeat=2)
    data2 = set(map(lambda y: tuple(b_5(*a) for a in zip(*y)), x))
    data = data.union(data2)
    #for tup in data:
    #    print(tup)
    #print()
    if len(data) == n:
        break
#print((1,0,0) in data)
#print((1,0,0,0,0) in data)
#print((1,0,0,0,2) in data)
#print((1,1,1,0,0) in data)
#print(len(data))

# output = open("dataout.txt", "w")
for tup in data:
    #if tup[4]==2 and tup[3]==0 and tup[2]==1: print(tup[0],tup[1],sep=' ',end='\n')
    #str = functools.reduce(operator.add, (tup))
    #output.write(str)
    print(tup)
# output.close()
# input.close()
#print(len(signature(b_6).parameters))
#with open('data.txt', 'w') vvas f:
#def read_tuples_from_file(file_path):
#    with open(file_path, 'r') as file:
#        lines = file.readlines()
#        tuples = [tuple(map(int, line.strip().split())) for line in lines]
#    return tuples
#def write_sorted_tuples_to_file(file_path, sorted_tuples):
#    with open(file_path, 'w') as file:
#        for sorted_tuple in sorted_tuples:
#            formatted_tuple = ' '.join(map(str, sorted_tuple))
#            file.write(formatted_tuple + '\n')
#
#file_path = 'tested_predicates/data_s_2_k_1_out'
#tuples = read_tuples_from_file(file_path)
#
#sorted_tuples = sorted(tuples)
#
#write_sorted_tuples_to_file(file_path, sorted_tuples)
#import itertools
#n=3
#my_list=[]
#for i in range (0,n):
#   future_tuple=[0]*n+[2]*n
#   future_tuple[i]=future_tuple[n+i]=1
#   future_tuple=[0,1]+future_tuple
#   list.append(future_tuple)
#print(list)